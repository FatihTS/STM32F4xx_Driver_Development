
DriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000020c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b4  080003bc  000103bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b4  080003b4  000103bc  2**0
                  CONTENTS
  4 .ARM          00000000  080003b4  080003b4  000103bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b4  080003bc  000103bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103bc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019c7  00000000  00000000  000103e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000045b  00000000  00000000  00011dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000247  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000088  00000000  00000000  00012450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000078  00000000  00000000  000124d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001dc1  00000000  00000000  00012550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000d39  00000000  00000000  00014311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000851d  00000000  00000000  0001504a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0001d567  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000000c4  00000000  00000000  0001d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800039c 	.word	0x0800039c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800039c 	.word	0x0800039c

080001e8 <GPIO_Init>:
 *
 *
 * @retval Void
 */

void GPIO_Init(GPIO_TypeDef_t* GPIOx,GPIO_InitTypeDef_t* GPIO_ConfigStruct){
 80001e8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t position;
	uint32_t fakePosition = 0;
	uint32_t lastPosition = 0;

	for(position = 0;position <16;position++){
 80001ea:	2300      	movs	r3, #0


		fakePosition = (0x1U << position);
 80001ec:	2601      	movs	r6, #1

		if(fakePosition == lastPosition){

			/* MODE CONFIG */
			uint32_t tempValue = GPIOx->MODER;
			tempValue &= ~(0x3U << (position * 2));
 80001ee:	2703      	movs	r7, #3
 80001f0:	e017      	b.n	8000222 <GPIO_Init+0x3a>

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF){


			/* OUPUT Type CONFIG */
			 tempValue = GPIOx->OTYPER;
 80001f2:	6844      	ldr	r4, [r0, #4]
			tempValue &= ~(0x1U << position);
 80001f4:	ea24 0202 	bic.w	r2, r4, r2
			tempValue |= ((GPIO_ConfigStruct->Otype) << position);
 80001f8:	688c      	ldr	r4, [r1, #8]
 80001fa:	409c      	lsls	r4, r3
 80001fc:	4322      	orrs	r2, r4
			GPIOx->OTYPER = tempValue;
 80001fe:	6042      	str	r2, [r0, #4]


			/* OUTPUT SPEED CONFIG */
			 tempValue = GPIOx->OSPEEDR;
 8000200:	6884      	ldr	r4, [r0, #8]
			tempValue &= ~(0x3U << (position * 2));
 8000202:	402c      	ands	r4, r5
			tempValue |= ((GPIO_ConfigStruct->Speed) << (position * 2 ));
 8000204:	690a      	ldr	r2, [r1, #16]
 8000206:	fa02 f20c 	lsl.w	r2, r2, ip
 800020a:	4322      	orrs	r2, r4
			GPIOx->OSPEEDR = tempValue;
 800020c:	6082      	str	r2, [r0, #8]

			}


		/* Push Pull CONFIG */
			 tempValue = GPIOx->PUPDR;
 800020e:	68c2      	ldr	r2, [r0, #12]
			tempValue &= ~(0x3U << (position * 2 ));
 8000210:	4015      	ands	r5, r2
			tempValue |= ((GPIO_ConfigStruct->Pupd) << (position * 2));
 8000212:	68ca      	ldr	r2, [r1, #12]
 8000214:	fa02 f20c 	lsl.w	r2, r2, ip
 8000218:	432a      	orrs	r2, r5
			GPIOx->PUPDR = tempValue;
 800021a:	60c2      	str	r2, [r0, #12]
	for(position = 0;position <16;position++){
 800021c:	3301      	adds	r3, #1
 800021e:	2b10      	cmp	r3, #16
 8000220:	d019      	beq.n	8000256 <GPIO_Init+0x6e>
		fakePosition = (0x1U << position);
 8000222:	fa06 f203 	lsl.w	r2, r6, r3
		lastPosition = (uint32_t)(GPIO_ConfigStruct->pinNumber) & fakePosition;
 8000226:	680c      	ldr	r4, [r1, #0]
		if(fakePosition == lastPosition){
 8000228:	ea32 0404 	bics.w	r4, r2, r4
 800022c:	d1f6      	bne.n	800021c <GPIO_Init+0x34>
			uint32_t tempValue = GPIOx->MODER;
 800022e:	6804      	ldr	r4, [r0, #0]
			tempValue &= ~(0x3U << (position * 2));
 8000230:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000234:	fa07 fe0c 	lsl.w	lr, r7, ip
 8000238:	ea6f 050e 	mvn.w	r5, lr
 800023c:	ea24 0e0e 	bic.w	lr, r4, lr
			tempValue |= ((GPIO_ConfigStruct->Mode) << (position * 2));
 8000240:	684c      	ldr	r4, [r1, #4]
 8000242:	fa04 f40c 	lsl.w	r4, r4, ip
 8000246:	ea44 040e 	orr.w	r4, r4, lr
			GPIOx->MODER = tempValue;
 800024a:	6004      	str	r4, [r0, #0]
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF){
 800024c:	684c      	ldr	r4, [r1, #4]
 800024e:	3c01      	subs	r4, #1
 8000250:	2c01      	cmp	r4, #1
 8000252:	d8dc      	bhi.n	800020e <GPIO_Init+0x26>
 8000254:	e7cd      	b.n	80001f2 <GPIO_Init+0xa>


		}

	}
}
 8000256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000258 <GPIO_WritePin>:
 * @retval Void
 */

void GPIO_WritePin(GPIO_TypeDef_t *GPIOx,uint16_t pinNumber,GPIO_PinState_t pinState){

if(pinState == GPIO_PIN_SET){
 8000258:	2a01      	cmp	r2, #1

	GPIOx->BSRR = pinNumber;
}else{

GPIOx->BSRR = (pinNumber << 16U);
 800025a:	bf18      	it	ne
 800025c:	0409      	lslne	r1, r1, #16
 800025e:	6181      	str	r1, [r0, #24]
}

}
 8000260:	4770      	bx	lr

08000262 <GPIO_ReadPin>:
GPIO_PinState_t GPIO_ReadPin(GPIO_TypeDef_t *GPIOx, uint16_t pinNumber){


	GPIO_PinState_t bitStatus = GPIO_PIN_RESET;

	if((GPIOx->IDR & pinNumber) != GPIO_PIN_RESET){
 8000262:	6903      	ldr	r3, [r0, #16]
 8000264:	4219      	tst	r1, r3

	bitStatus = GPIO_PIN_SET;

	}
	return bitStatus;
}
 8000266:	bf14      	ite	ne
 8000268:	2001      	movne	r0, #1
 800026a:	2000      	moveq	r0, #0
 800026c:	4770      	bx	lr

0800026e <GPIO_LockPin>:
 * @retval Void
 */

void GPIO_LockPin(GPIO_TypeDef_t *GPIOx, uint16_t pinNumber){

     uint32_t tempValue = (0x1U << 16U) | pinNumber;
 800026e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000

	GPIOx->LCKR = tempValue;                        	   // 	LCKR[16] = ‘1’ 	 		LCKR[DATA]
 8000272:	61c3      	str	r3, [r0, #28]
	GPIOx->LCKR = pinNumber;							   // 	LCKR[16] = ‘0’ 			LCKR[DATA]
 8000274:	61c1      	str	r1, [r0, #28]
	GPIOx->LCKR = tempValue;							   // 	LCKR[16] = ‘1’ 			LCKR[DATA]
 8000276:	61c3      	str	r3, [r0, #28]
	tempValue = GPIOx->LCKR;                               //   Read Lock register
 8000278:	69c3      	ldr	r3, [r0, #28]

}
 800027a:	4770      	bx	lr

0800027c <main>:

static void GPIO_LedConfig();
static void GPIO_Lock();

int main(void)
{
 800027c:	b500      	push	{lr}
 800027e:	b087      	sub	sp, #28
}


static void GPIO_LedConfig(){

	RCC_GPIOD_CLK_ENABLE();
 8000280:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <main+0x78>)
 8000282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000284:	f042 0208 	orr.w	r2, r2, #8
 8000288:	631a      	str	r2, [r3, #48]	; 0x30
 800028a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	RCC_GPIOA_CLK_ENABLE();
 800028c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30

GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 8000296:	2400      	movs	r4, #0
 8000298:	9405      	str	r4, [sp, #20]

GPIO_InitStruct.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800029a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800029e:	9300      	str	r3, [sp, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 80002a0:	2501      	movs	r5, #1
 80002a2:	9501      	str	r5, [sp, #4]
GPIO_InitStruct.Pupd = GPIO_PUPD_NOPULL;
 80002a4:	9403      	str	r4, [sp, #12]
GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 80002a6:	9402      	str	r4, [sp, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80002a8:	2602      	movs	r6, #2
 80002aa:	9604      	str	r6, [sp, #16]


GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002ac:	4669      	mov	r1, sp
 80002ae:	4812      	ldr	r0, [pc, #72]	; (80002f8 <main+0x7c>)
 80002b0:	f7ff ff9a 	bl	80001e8 <GPIO_Init>

memset(&GPIO_InitStruct,0,sizeof(GPIO_InitStruct));
 80002b4:	9402      	str	r4, [sp, #8]
 80002b6:	9404      	str	r4, [sp, #16]
 80002b8:	9405      	str	r4, [sp, #20]

GPIO_InitStruct.pinNumber = GPIO_PIN_0;
 80002ba:	9500      	str	r5, [sp, #0]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002bc:	9401      	str	r4, [sp, #4]
GPIO_InitStruct.Pupd = GPIO_PUPD_PULLDOWN;
 80002be:	9603      	str	r6, [sp, #12]

GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c0:	4c0e      	ldr	r4, [pc, #56]	; (80002fc <main+0x80>)
 80002c2:	4669      	mov	r1, sp
 80002c4:	4620      	mov	r0, r4
 80002c6:	f7ff ff8f 	bl	80001e8 <GPIO_Init>
GPIO_LockPin(GPIOA, GPIO_PIN_0);
 80002ca:	4629      	mov	r1, r5
 80002cc:	4620      	mov	r0, r4
 80002ce:	f7ff ffce 	bl	800026e <GPIO_LockPin>
if(GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 80002d2:	4625      	mov	r5, r4
 80002d4:	2401      	movs	r4, #1
	GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80002d6:	4e08      	ldr	r6, [pc, #32]	; (80002f8 <main+0x7c>)
if(GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 80002d8:	4621      	mov	r1, r4
 80002da:	4628      	mov	r0, r5
 80002dc:	f7ff ffc1 	bl	8000262 <GPIO_ReadPin>
 80002e0:	2801      	cmp	r0, #1
	GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 80002e2:	bf0c      	ite	eq
 80002e4:	4622      	moveq	r2, r4
	GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80002e6:	2200      	movne	r2, #0
 80002e8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80002ec:	4630      	mov	r0, r6
 80002ee:	f7ff ffb3 	bl	8000258 <GPIO_WritePin>
 80002f2:	e7f1      	b.n	80002d8 <main+0x5c>
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020c00 	.word	0x40020c00
 80002fc:	40020000 	.word	0x40020000

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 f811 	bl	8000354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ffa3 	bl	800027c <main>

08000336 <LoopForever>:

LoopForever:
    b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	080003bc 	.word	0x080003bc
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	2000001c 	.word	0x2000001c

08000350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <__libc_init_array>:
 8000354:	b570      	push	{r4, r5, r6, lr}
 8000356:	4d0d      	ldr	r5, [pc, #52]	; (800038c <__libc_init_array+0x38>)
 8000358:	4c0d      	ldr	r4, [pc, #52]	; (8000390 <__libc_init_array+0x3c>)
 800035a:	1b64      	subs	r4, r4, r5
 800035c:	10a4      	asrs	r4, r4, #2
 800035e:	2600      	movs	r6, #0
 8000360:	42a6      	cmp	r6, r4
 8000362:	d109      	bne.n	8000378 <__libc_init_array+0x24>
 8000364:	4d0b      	ldr	r5, [pc, #44]	; (8000394 <__libc_init_array+0x40>)
 8000366:	4c0c      	ldr	r4, [pc, #48]	; (8000398 <__libc_init_array+0x44>)
 8000368:	f000 f818 	bl	800039c <_init>
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	10a4      	asrs	r4, r4, #2
 8000370:	2600      	movs	r6, #0
 8000372:	42a6      	cmp	r6, r4
 8000374:	d105      	bne.n	8000382 <__libc_init_array+0x2e>
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	f855 3b04 	ldr.w	r3, [r5], #4
 800037c:	4798      	blx	r3
 800037e:	3601      	adds	r6, #1
 8000380:	e7ee      	b.n	8000360 <__libc_init_array+0xc>
 8000382:	f855 3b04 	ldr.w	r3, [r5], #4
 8000386:	4798      	blx	r3
 8000388:	3601      	adds	r6, #1
 800038a:	e7f2      	b.n	8000372 <__libc_init_array+0x1e>
 800038c:	080003b4 	.word	0x080003b4
 8000390:	080003b4 	.word	0x080003b4
 8000394:	080003b4 	.word	0x080003b4
 8000398:	080003b8 	.word	0x080003b8

0800039c <_init>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr

080003a8 <_fini>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr
